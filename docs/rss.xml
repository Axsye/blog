<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Koude's Blog</title><link>https://Axsye.github.io/blog</link><description>随便记录一些学习笔记</description><copyright>Koude's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/64404224?s=400&amp;u=98b0649d0de846e66310504be3905c6eaa0dd178&amp;v=4</url><title>avatar</title><link>https://Axsye.github.io/blog</link></image><lastBuildDate>Tue, 29 Jul 2025 09:45:15 +0000</lastBuildDate><managingEditor>Koude's Blog</managingEditor><ttl>60</ttl><webMaster>Koude's Blog</webMaster><item><title>单Ubuntu电脑卫星地面站部署方法</title><link>https://Axsye.github.io/blog/post/dan-Ubuntu-dian-nao-wei-xing-di-mian-zhan-bu-shu-fang-fa.html</link><description>&lt;img width='3634' height='2003' alt='Image' src='https://github.com/user-attachments/assets/bae85381-8970-42c5-a863-7d40803b3589' /&gt;

# 1. 硬件配置

电台：IC-9700 USB接IF输出到电脑，同时接USB转CIV到9700的CIV接口
旋转器：G5500 控制接口 GS-2320B 通过USB连接到电脑
电脑配置：i3-5015U 8GB RAM 128GB SSD

# 2. 系统配置

&gt; ASRTU-1网盘链接：
https://1drv.ms/f/c/a7c3226f3f26758d/Eu6cZ-zqR9pOll54FyFmgX4BcsO14ehxuyQgCw6y0rBLwA
&gt;
&gt;包括linux livecd、windows解调软件、图像校正软件、离线解析软件、信号录音等，动态更新

将livecd通过rufus制作u盘启动盘，确保u盘没有坏块且≥16GB
通过U盘启动后选择Try or install Ubuntu
然后直接选择install _**注意install过程中用户名必须选ubuntu**_

进入系统后桌面图标显示不能直接运行，这个自行搜索解决办法

正常登录vpn，启动gnuradio，与常规阿斯图livecd操作没区别

# 3. 地面站软件配置

如果要用一台电脑实现地面站，需要同时接通：
1. 电台的中频输入输出，gnuradio控制
2. 电台的PTT控制，gnuradio通过9700的USB控制
3. 电台的多普勒，gpredict通过usb转civ控制
4. 旋转器，gpredict通过usb控制

## 3.1. GNURadio相关配置

9700接上USB，选择IF OUT，电脑上用arecord -l显示声卡
card 1，device 0 则gnuradio中设置hw:1,0

&lt;img width='218' height='99' alt='Image' src='https://github.com/user-attachments/assets/8898cf93-f299-439f-b8e9-5f30c5175b5d' /&gt;

&lt;img width='231' height='117' alt='Image' src='https://github.com/user-attachments/assets/9ab29c1a-7b29-4885-a1f7-da812341e1b0' /&gt;

记得开电脑声音……

PTT要选择9700 ptt对应的端口

&lt;img width='266' height='120' alt='Image' src='https://github.com/user-attachments/assets/a8d4a52b-3b83-46af-8912-94e7fd7cdd03' /&gt;

## 3.2. Gpredict相关配置

livecd中自带了gpredict和hamlib，gpredict对旋转器和电台的控制均通过hamlib实现

首先需要配置hamlib

### 3.2.1 旋转器配置

首先通过`rotctl -l`列出所有支持的旋转器

&lt;img width='529' height='348' alt='Image' src='https://github.com/user-attachments/assets/132e8b6c-2807-497a-9e4b-84013038644b' /&gt;

可以看到GS-232B是603

&gt; 居然还支持一些赤道仪
&gt; &lt;img width='532' height='341' alt='Image' src='https://github.com/user-attachments/assets/9b22b554-f66e-405e-8127-8f824420f765' /&gt;

然后运行命令

```bash
rotctld -m 603 -r /dev/ttyUSB2
```

&gt; -m 设备代号 -r 地址 -s 波特率（缺省自动选择设备支持的最大）

启动旋转器控制的监听，将会自动监听gpredict的输出给旋转器

然后配置gpredict

&lt;img width='1138' height='907' alt='Image' src='https://github.com/user-attachments/assets/41b56c37-3e6a-4a18-b7d9-dd9939810655' /&gt;

&gt; locakhost和4533是hamlib默认的

&lt;img width='794' height='444' alt='Image' src='https://github.com/user-attachments/assets/937cb2f2-f2ad-4578-b489-39f328ca1cd6' /&gt;

&lt;img width='1193' height='525' alt='Image' src='https://github.com/user-attachments/assets/bdbd3645-5cff-4e79-8c01-0b455659b578' /&gt;

选择Engage，过一段时间不会自动跳掉即表明配置成功

### 3.2.2 电台配置

通过`rigctl -l`显示支持的电台

&lt;img width='532' height='372' alt='Image' src='https://github.com/user-attachments/assets/c4e35127-e20e-4026-b923-fb0815ef2a7f' /&gt;

可以看到9700是3081

然后运行一下指令

```bash
rigctld -m 3081 -s 9600 -c 162 -r /dev/ttyUSB3
```

&gt; -m 设备代号 -s 波特率 -c CIV地址(十进制) -r 端口
&gt; 由于用usb转CIV所以波特率的9600，CIV地址需要看9700电台设置是什么，比如此时地址是A2H，指令参数就是十进制162
&gt; 测试发现最好把-r /dev/ttyUSB3放到最后，否则有时候报非法参数

这样就启动了hamlib控制电台的监听，自动监听gpredict的控制

然后配置gpredict

&lt;img width='1138' height='908' alt='Image' src='https://github.com/user-attachments/assets/2526a99b-e8aa-4eb0-abce-ecb8ee9625cd' /&gt;

localhost和4532是hamlib默认的，如果发现上下行相反就切换up/down

&lt;img width='794' height='444' alt='Image' src='https://github.com/user-attachments/assets/c8418be7-5c98-41c8-a7bc-a508c4cf0751' /&gt;

&lt;img width='1257' height='642' alt='Image' src='https://github.com/user-attachments/assets/57d775dc-4b75-4726-a1ec-fe2bbadaf78b' /&gt;

点击engage，过一段时间发现不会自动跳掉即配置成功

# 4. PS
善用hamlib的 -h 可以解决不少问题。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/dan-Ubuntu-dian-nao-wei-xing-di-mian-zhan-bu-shu-fang-fa.html</guid><pubDate>Tue, 29 Jul 2025 09:08:03 +0000</pubDate></item><item><title>自用：XXXI测试中的外设基本写法</title><link>https://Axsye.github.io/blog/post/zi-yong-%EF%BC%9AXXXI-ce-shi-zhong-de-wai-she-ji-ben-xie-fa.html</link><description># 1、协议编写

首先是添加对应的文件，在其中实现具体协议内容

![Image](https://github.com/user-attachments/assets/dbad9609-1388-4afd-b8ef-83f3968511d8)

![Image](https://github.com/user-attachments/assets/adbb7862-4322-40a5-8550-0da78ae6aaed)

在这里添加MCMI的下位机接收ID

![Image](https://github.com/user-attachments/assets/324e87cc-7abd-426a-9d54-d84d38610303)

![Image](https://github.com/user-attachments/assets/3e13c42a-44fd-4936-8383-33a3b28827d8)

**需要在`LOS_SYS.h`中添加新增的头文件！！**，否则不会编译新增内容

![Image](https://github.com/user-attachments/assets/b2897fad-cd34-4d8e-a463-bec2253d0eee)

# 2、遥控部分代码添加

先在这里添加

![Image](https://github.com/user-attachments/assets/2b3bab93-3405-4ee5-94f5-f659738003f2)

![Image](https://github.com/user-attachments/assets/a1cce5fb-5f73-4ef7-a518-4f92dc917f61)

这里有两处需要添加

![Image](https://github.com/user-attachments/assets/89d8d793-9e16-4d37-94f2-25d80c42ed6b)

![Image](https://github.com/user-attachments/assets/46858ca3-0dbe-4c4e-b5d0-17c99a53d4af)

![Image](https://github.com/user-attachments/assets/065f9737-e7f0-4aa2-b08e-7a3f82827fed)

可以临时通过修改指令来测试

![Image](https://github.com/user-attachments/assets/abcd410a-b9c9-4812-8810-aa2241507c0a)

# 3、遥测部分代码添加

首先需要在halcogen里配置msgbox，重点是activate、txrx、id、enable int

![Image](https://github.com/user-attachments/assets/a402f7da-ac4e-4473-a776-c70e214a2d84)

然后删除生成的多余文件，实测tilayer里面，inc有两个、src有三个

![Image](https://github.com/user-attachments/assets/685d15f3-7cea-45a5-848a-3606fb2979e9)

![Image](https://github.com/user-attachments/assets/4ef0bb18-7d95-4fad-9553-7c2cef3fbebc)

然后添加以下内容

![Image](https://github.com/user-attachments/assets/57b590da-0374-4b41-b5b9-31632e466bd1)

记得修改回调函数

![Image](https://github.com/user-attachments/assets/ef909775-9136-4b6e-9c18-a1c572b03233)

然后修改遥测，记得结尾加0xCB

![Image](https://github.com/user-attachments/assets/9614cfe9-9330-4b0c-9db9-5e15db4bc1b1)

![Image](https://github.com/user-attachments/assets/d4fe7378-3aa6-4c5a-9149-65d351273f2f)

此时就能正常发出遥测了

![Image](https://github.com/user-attachments/assets/097976b4-8c88-4927-ac6a-13e4dca9d77b)

解析必须配置好，包结尾必须正确，才能正常解析。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/zi-yong-%EF%BC%9AXXXI-ce-shi-zhong-de-wai-she-ji-ben-xie-fa.html</guid><pubDate>Wed, 19 Mar 2025 10:38:36 +0000</pubDate></item><item><title>【GNURadio】 通过docker实现多版本同时安装</title><link>https://Axsye.github.io/blog/post/%E3%80%90GNURadio%E3%80%91%20-tong-guo-docker-shi-xian-duo-ban-ben-tong-shi-an-zhuang.html</link><description>&gt; 通过docker安装目前已经测试3.10版本连接PlutoSDR，理论上也可以正常安装3.8和3.9版本


# 1.乌拉圭的老哥做的dockerfile

Github仓库：
https://github.com/git-artes/docker-gnuradio

这个仓库里有3.7 3.8 3.9 3.10的dockerfile，每个文件对应不同的容器，可以同时运行多个不同版本的容器
以3.10版本安装为例

---

 原文：
If you want the release version of GNU Radio (currently 3.10): 

1. Install docker by following [Docker's installation guide](https://docs.docker.com/get-docker/) (though I've tested this on Ubuntu only, so for convenience a direct link to the corresponding [guide for Ubuntu](https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository)). 
2. Clone this repo: `git clone https://github.com/git-artes/docker-gnuradio.git`
3. Enter the `docker-gnuradio/gnuradio-releases` folder and execute `docker build -t ubuntu:gnuradio-releases .` (this step is necessary only once, or every time you modify *Dockerfile*) 
4. Run the container: 
```bash
docker run --net=host --env='DISPLAY' --volume='$HOME/.Xauthority:/root/.Xauthority:rw' --device /dev/snd -v persistent:/home/gnuradio/persistent --device /dev/dri -v /dev/bus/usb/:/dev/bus/usb/ --privileged --group-add=audio -it ubuntu:gnuradio-releases bash
```

You will then be in a comand line logged as user *gnuradio* who is a sudoer (password: *gnuradio*). The folder *persistent* in its home directory will persist even after you exit the container. **Remember**: everything else is erased after you exit the container. This means for instance that if you compile and install an OOT you will have to do that again every time you run the container (unless for instance you compile in the *persistent* folder). You may modify Dockerfile to avoid this. 

The host's USB should be accessible from the docker too, meaning you should be able to use any SDR hardware you plug into the PC.

---

实测所有docker命令前需要sudo
其中第四步运行容器时我使用了`sudo sudo .......`才成功运行
原文中第四步创建容器时没有指定容器名字，可以添加-name参数
```bash
docker run --name=gnuradio-310 --net=host --env='DISPLAY' --volume='$HOME/.Xauthority:/root/.Xauthority:rw' --device /dev/snd -v persistent:/home/gnuradio/persistent --device /dev/dri -v /dev/bus/usb/:/dev/bus/usb/ --privileged --group-add=audio -it ubuntu:gnuradio-releases bash
```

&gt;  这步指定了网络使用主机网络、显示使用主机显示器、声音用主机的声音、设定了一个卷persistent用于永久储存容器里的数据、映射了主机的usb、给予了高权限、最后用了刚刚编译好的镜像

启动容器后，当前终端会立刻变成容器的终端，容器的用户名和密码都是gnuradio，之后就可以在容器中通过`gnuradio-companion`启动grc3.10了。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90GNURadio%E3%80%91%20-tong-guo-docker-shi-xian-duo-ban-ben-tong-shi-an-zhuang.html</guid><pubDate>Mon, 03 Mar 2025 07:36:56 +0000</pubDate></item><item><title>【COBS】 COBS协议规范</title><link>https://Axsye.github.io/blog/post/%E3%80%90COBS%E3%80%91%20COBS-xie-yi-gui-fan.html</link><description># COBS编码规范

&gt; 仅仅做一个存档的作用

**Consistent Overhead Byte Stuffing (COBS)** 是一种对数据字节进行编码的算法，无论数据包内容如何，都能产生高效、可靠、明确的数据包成帧，从而使接收应用程序能够轻松地从格式错误的数据包中恢复。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90COBS%E3%80%91%20COBS-xie-yi-gui-fan.html</guid><pubDate>Fri, 31 Jan 2025 04:12:47 +0000</pubDate></item><item><title>【WEB】 简单地通过docker部署node.js开发的网页</title><link>https://Axsye.github.io/blog/post/%E3%80%90WEB%E3%80%91%20-jian-dan-di-tong-guo-docker-bu-shu-node.js-kai-fa-de-wang-ye.html</link><description>## 以随便做的一个demo项目为例&#13;
&#13;
# 1. 文件结构以及dockerfile编写&#13;
&#13;
## 1.1. 项目根目录下的文件结构如图&#13;
&#13;
![image](https://github.com/user-attachments/assets/c4238a97-d708-48b4-b350-70282169a445)&#13;
&#13;
这个项目里的npm指令是直接在根目录运行的，故指令生成的`package.json` `package-lock.json`都在根目录。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90WEB%E3%80%91%20-jian-dan-di-tong-guo-docker-bu-shu-node.js-kai-fa-de-wang-ye.html</guid><pubDate>Fri, 10 Jan 2025 14:50:28 +0000</pubDate></item><item><title>【ZCU111】 一些折腾记录（坑）</title><link>https://Axsye.github.io/blog/post/%E3%80%90ZCU111%E3%80%91%20-yi-xie-zhe-teng-ji-lu-%EF%BC%88-keng-%EF%BC%89.html</link><description># 1. boot模式按钮&#13;
&#13;
根据文档UG1271，描述的开关状态&#13;
&#13;
**注意：**&#13;
**SW6开关打到上侧ON代表0，打到下侧数字侧代表1**&#13;
**UG1271中有些是从4-1，二quick start guide中是1-4，是反的**&#13;
&#13;
![image](https://github.com/user-attachments/assets/a4c04210-a545-4468-bf25-68fd56a1b7f2)&#13;
![image](https://github.com/user-attachments/assets/0c6782c6-3326-4ee0-92cc-5c9e7fa0df8a)&#13;
&#13;
# 2. 运行PetaLinux&#13;
&#13;
&gt; YouTube 教程&#13;
&gt; 1: https://youtu.be/k03r2Ud42jY?si=i08_mJ-B5VjpQMES&#13;
&gt; 2: https://youtu.be/PaQBQkDZaks?si=9iv_k0U3LMCztJMs&#13;
&#13;
&#13;
官网PetaLinux下载链接&#13;
https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html&#13;
ZCU111的BSP貌似已经不更新了。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90ZCU111%E3%80%91%20-yi-xie-zhe-teng-ji-lu-%EF%BC%88-keng-%EF%BC%89.html</guid><pubDate>Sun, 06 Oct 2024 06:11:46 +0000</pubDate></item><item><title>【ZCU111】重新烧录QSPI，运行BIST</title><link>https://Axsye.github.io/blog/post/%E3%80%90ZCU111%E3%80%91-zhong-xin-shao-lu-QSPI%EF%BC%8C-yun-xing-BIST.html</link><description>拿到板子之后，按照Quick Start Guide启动BIST发现INIT_B始终为红色，BoardUI连上没反应，FMC卡插上后VADJ FMC不亮&#13;
于是看油管上别人的BIST视频&#13;
&#13;
&gt; https://www.youtube.com/watch?v=u-6CQBHGNG8&amp;list=PL6G4uDwVg2cljE07uKgnMy16SJH97KMYV&amp;index=4&#13;
&#13;
找到了遇到同样问题的帖子&#13;
&#13;
&gt; https://adaptivesupport.amd.com/s/question/0D52E00006iHqvxSAC/zcu111-power-on-failed?language=en_US&#13;
&#13;
建议重新烧录QSPI&#13;
![image](https://github.com/user-attachments/assets/44fee2b2-3307-4462-bf93-d3e2769a93f9)&#13;
&#13;
&gt; Hi,&#13;
&gt; It seems there is some problem with the power rails as multiple power and status LEDs are off and SCUI readings are askew.&#13;
&gt; Please try restoring the flash and see it helps with the BIST.&#13;
&gt; Tutorial- https://www.xilinx.com/member/forms/download/design-license.html?cid=0540b548-181d-4514-a120-19cbbcec3243&amp;filename=xtp515-zcu111-restoring-flash-c-2018-3.pdf&#13;
&gt; File- https://www.xilinx.com/member/forms/download/design-license.html?cid=497f9c5d-42a1-41c2-b1c6-2bab976583f9&amp;filename=rdf0473-zcu111-restoring-flash-c-2018-3.zip&#13;
&gt; If the issue persists , file a RMA SR with the Xilinx for further technical debug. &#13;
&gt; https://www.xilinx.com/support/quality/product-return.html&#13;
&gt; Best Regards,&#13;
&gt; Vatsal&#13;
&#13;
烧录教程（需要装好vivado，启动TCL Shell）：&#13;
[xtp515-zcu111-restoring-flash-c-2018-3.pdf](https://github.com/user-attachments/files/17266452/xtp515-zcu111-restoring-flash-c-2018-3.pdf)&#13;
文件：&#13;
[rdf0473-zcu111-restoring-flash-c-2018-3.zip](https://github.com/user-attachments/files/17266453/rdf0473-zcu111-restoring-flash-c-2018-3.zip)&#13;
&#13;
重新烧录后还是亮红灯，需要手动按一下SW3来重启，重启后INIT_B正常，VADJ FMC正常，电源 DS40 PS_DDR4_VTEAM有时启动后亮有时不亮（怀疑这里还是有问题）&#13;
至少自检是能过了&#13;
![IMG_20241005_220550](https://github.com/user-attachments/assets/cb5f8481-3ae7-4e16-83f9-02dc98eabc86)&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90ZCU111%E3%80%91-zhong-xin-shao-lu-QSPI%EF%BC%8C-yun-xing-BIST.html</guid><pubDate>Sat, 05 Oct 2024 14:02:04 +0000</pubDate></item><item><title>【内网穿透】 Zerotier OpenVPN</title><link>https://Axsye.github.io/blog/post/%E3%80%90-nei-wang-chuan-tou-%E3%80%91%20Zerotier%20OpenVPN.html</link><description># 1. Zerotier&#13;
&#13;
优点：使用最简单，能建立P2P的情况下延迟低，速度快&#13;
缺点：实测能建立P2P的情况很少，中转模式下以来国外的Planet根服务器，延迟极高速度极慢不稳定&#13;
&#13;
总结之前的经验来看，只有少数情况下zt可以建立点对点，基本上还是靠中转。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90-nei-wang-chuan-tou-%E3%80%91%20Zerotier%20OpenVPN.html</guid><pubDate>Wed, 25 Sep 2024 06:43:52 +0000</pubDate></item><item><title>【Python】 记录一些好用的东西</title><link>https://Axsye.github.io/blog/post/%E3%80%90Python%E3%80%91%20-ji-lu-yi-xie-hao-yong-de-dong-xi.html</link><description># 1.  logging

如果想要log记录在同一个文件中，并且终端也能输出

```python

import logging

# 配置日志
# 配置日志记录
logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s] %(name)s [%(levelname)s]: %(message)s',
                    handlers=[
                        logging.FileHandler('raspberry_control.log', mode='a'),
                        logging.StreamHandler()
                    ])

# 创建一个logger
log = logging.getLogger(__name__)

```

如果想要每次运行记录一个不同的log文件

```python

import time
import logging

# 配置日志
# 配置日志记录
logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s] %(name)s [%(levelname)s]: %(message)s',
                    handlers=[
                        logging.FileHandler(f'log/{time.strftime('%Y-%m-%d_%H-%M-%S')} raspberry_control.log', mode='a'),
                        logging.StreamHandler()
                    ])

# 创建一个logger
log = logging.getLogger(__name__)

```

# 2. 树莓派开机启动脚本

&gt; 网上有很多各种教程，只记录一个实测的可靠方法，和启动后手动通过终端打开效果基本一致
&gt; 【P8-开机启动Python程序】 https://www.bilibili.com/video/BV1bg411R7WJ/?share_source=copy_web&amp;vd_source=1735967fff393ffa3d39f23c1c1f2362

通过在/home/pi/.config/autostart/新建.desktop文件实现
位置：
/home/pi/.config/autostart/test.desktop

&gt; EDATEC没删掉的测试文件

```

[Desktop Entry]
Name=test
Comment=EDATEDtest
Exec=/home/pi/.local/ed_test/ed_test_start.sh
Terminal=yes
MultipleArgs=false
Type=Application
Categories=Application;Development;
StartupNotify=true

```

&gt; 自己亲测的文件，启动python脚本
&gt; 注意 Exec=/usr/bin/x-terminal-emulator -e 'python3 -u /home/pi/work/test/mpvtest.py' 这一行内容最重要

```

[Desktop Entry]
Encoding=UTF-8
Name=mpvtest
Exec=/usr/bin/x-terminal-emulator -e 'python3 -u /home/pi/work/test/mpvtest.py'
Terminal=true
Type=Application
StartupNotify=true

```

# 3. 字符串转字典的方法

&gt; https://blog.csdn.net/u012206617/article/details/114326884

```python

&gt;&gt;&gt; import ast
&gt;&gt;&gt; user = '{'name' : 'john', 'gender' : 'male', 'age': 28}'
&gt;&gt;&gt; user_dict = ast.literal_eval(user)
&gt;&gt;&gt; user_dict
{'gender': 'male', 'age': 28, 'name': 'john'}
user_info = '{'name' : 'john', 'gender' : 'male', 'age': 28}'
&gt;&gt;&gt; user_dict = ast.literal_eval(user)
&gt;&gt;&gt; user_dict
{'gender': 'male', 'age': 28, 'name': 'john'}

```

&gt; 附上字典用法
&gt; https://www.runoob.com/python/python-dictionary.html

# 4. COBS编码

&gt; WIKI:
&gt; https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing

&gt; https://blog.mbedded.ninja/programming/serialization-formats/consistent-overhead-byte-stuffing-cobs/

&gt; https://www.armbbs.cn/forum.php?mod=viewthread&amp;tid=115429#:~:text=%E6%83%B3%E5%88%B0%E4%BA%86%E4%B8%80%E7%A7%8D%E6%89%A9%E5%B1%95cob

![image](https://github.com/user-attachments/assets/88fac755-0db4-410f-87fe-8c552347ccb9)
![image](https://github.com/user-attachments/assets/da179016-86c9-4aef-90dd-aeb10695e0f2)
![image](https://github.com/user-attachments/assets/f82fc340-e2ec-461b-833c-9a1771d64b18)

```C
#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;
#include &lt;assert.h&gt;

/** COBS encode data to buffer
	@param data Pointer to input data to encode
	@param length Number of bytes to encode
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
size_t cobsEncode(const void *data, size_t length, uint8_t *buffer)
{
	assert(data &amp;&amp; buffer);

	uint8_t *encode = buffer; // Encoded byte pointer
	uint8_t *codep = encode++; // Output code pointer
	uint8_t code = 1; // Code value

	for (const uint8_t *byte = (const uint8_t *)data; length--; ++byte)
	{
		if (*byte) // Byte not zero, write it
			*encode++ = *byte, ++code;

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
		{
			*codep = code, code = 1, codep = encode;
			if (!*byte || length)
				++encode;
		}
	}
	*codep = code; // Write final code value

	return (size_t)(encode - buffer);
}

/** COBS decode data from buffer
	@param buffer Pointer to encoded input bytes
	@param length Number of bytes to decode
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
size_t cobsDecode(const uint8_t *buffer, size_t length, void *data)
{
	assert(buffer &amp;&amp; data);

	const uint8_t *byte = buffer; // Encoded input byte pointer
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer

	for (uint8_t code = 0xff, block = 0; byte &lt; buffer + length; --block)
	{
		if (block) // Decode block byte
			*decode++ = *byte++;
		else
		{
			block = *byte++;             // Fetch the next block length
			if (block &amp;&amp; (code != 0xff)) // Encoded zero, write it unless it's delimiter.
				*decode++ = 0;
			code = block;
			if (!code) // Delimiter code found
				break;
		}
	}

	return (size_t)(decode - (uint8_t *)data);
}
```。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90Python%E3%80%91%20-ji-lu-yi-xie-hao-yong-de-dong-xi.html</guid><pubDate>Tue, 17 Sep 2024 03:29:21 +0000</pubDate></item><item><title>【KISS, HDLC, AX.25 and friends】 EA4GPZ / M0HXM 的文章翻译</title><link>https://Axsye.github.io/blog/post/%E3%80%90KISS%2C%20HDLC%2C%20AX.25%20and%20friends%E3%80%91%20EA4GPZ%20-%20M0HXM%20-de-wen-zhang-fan-yi.html</link><description># KISS, HDLC, AX.25 and friends&#13;
&#13;
- EA4GPZ / M0HXM 的[网站](https://destevez.net/)上的文章 **_KISS, HDLC, AX.25 and friends_**&#13;
&#13;
&gt; 原文链接&#13;
&gt; https://destevez.net/2016/06/kiss-hdlc-ax-25-and-friends/&#13;
&#13;
### 翻译：&#13;
&#13;
不久前，我将我的[gr-kiss](https://github.com/daniestevez/gr-kiss) out-of-tree GNU Radio模块上传到了Github。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90KISS%2C%20HDLC%2C%20AX.25%20and%20friends%E3%80%91%20EA4GPZ%20-%20M0HXM%20-de-wen-zhang-fan-yi.html</guid><pubDate>Sun, 08 Sep 2024 13:46:05 +0000</pubDate></item><item><title>【KISS Protocol】 KISS 协议</title><link>https://Axsye.github.io/blog/post/%E3%80%90KISS%20Protocol%E3%80%91%20KISS%20-xie-yi.html</link><description># 1. KISS是啥 &#13;
&#13;
## 1.1. EA4GPZ / M0HXM 的[网站](https://destevez.net/)上的文章摘录 **_KISS, HDLC, AX.25 and friends_** &#13;
&#13;
- https://destevez.net/2016/06/kiss-hdlc-ax-25-and-friends/&#13;
- [自己翻译](https://axsye.github.io/blog/post/%E3%80%90KISS%2C%20HDLC%2C%20AX.25%20and%20friends%E3%80%91%20EA4GPZ%20-%20M0HXM%20-de-wen-zhang-fan-yi.html)&#13;
&#13;
&gt; KISS部分原文：&#13;
&gt; KISS The KISS protocol was originally designed to interface a computer with a TNC (Terminal Network Controller). Think of the TNC as a sort of modem that does some modulation and low level framing functions. The idea of KISS is to move most of the processing to the host computer. Before KISS, a TNC usually performed some AX.25 related tasks. However, a KISS TNC only works with HDLC and passes raw AX.25 frames to the host. The KISS protocol is described [here](http://www.ax25.net/kiss.aspx). It provides a way to separate frames and to send commands to the TNC. Since this protocol is so simple, it is also used in many situations where no TNC is involved. In this case, it is just used to divide a stream of data into frames. Thus, a series of packets can be saved to a file “in KISS format”. These packets are usually AX.25 frames, but this need not be the case. Also, different pieces of software can exchange packets using the KISS format.&#13;
&gt; &#13;
&gt; The end of a frame is marked by the byte 0xC0. The start of a frame need not be explicitly marked (but it is usually also marked with 0xC0). Several consecutive 0xC0 bytes may appear. This doesn’t mean that there are empty frames between them. Empty frames are not allowed. The first byte of any frame is used to send commands to the TNC. When a TNC is not involved, the first byte is 0x00. Then the real frame bytes come after it. The byte 0xC0 can not appear anywhere inside a frame. If the data contains this byte, it is replaced by 0xDB 0xDC. If 0xDB appears in the data, it is replaced by 0xDB 0xDD.&#13;
&#13;
### 翻译：&#13;
&#13;
### KISS协议&#13;
&#13;
**KISS协议**最初是为计算机与TNC（终端网络控制器）之间的接口而设计的。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90KISS%20Protocol%E3%80%91%20KISS%20-xie-yi.html</guid><pubDate>Fri, 06 Sep 2024 12:51:50 +0000</pubDate></item><item><title>【Markdown】 记录写Markdown时遇到的问题</title><link>https://Axsye.github.io/blog/post/%E3%80%90Markdown%E3%80%91%20-ji-lu-xie-Markdown-shi-yu-dao-de-wen-ti.html</link><description># 1. 关于github上markdown不支持[TOC]生成目录&#13;
这篇文章列举了几种解决方法解决办法：&#13;
https://blog.csdn.net/johnjim0/article/details/105353427&#13;
&gt; 目前这些方法里面还没有特别满意的&#13;
&#13;
这篇文章写了使用GitHub-Markdown-Toc的解决方法&#13;
https://developer.baidu.com/article/details/2870332&#13;
需要使用到npm&#13;
&gt; 暂时没时间折腾，放着之后再说&#13;
。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90Markdown%E3%80%91%20-ji-lu-xie-Markdown-shi-yu-dao-de-wen-ti.html</guid><pubDate>Wed, 04 Sep 2024 13:43:43 +0000</pubDate></item><item><title>【ZYNQ】 Zynq UltraScale+ RFSoC ZCU111 Evaluation Kit</title><link>https://Axsye.github.io/blog/post/%E3%80%90ZYNQ%E3%80%91%20Zynq%20UltraScale%2B%20RFSoC%20ZCU111%20Evaluation%20Kit.html</link><description># 官网网址&#13;
https://www.xilinx.com/products/boards-and-kits/zcu111.html&#13;
# 官方User Guide&#13;
&gt; 交互式的说明书，内容多且丰富&#13;
&#13;
https://docs.amd.com/r/en-US/ug1271-zcu111-eval-bd/ZCU111-Evaluation-Board-User-Guide。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90ZYNQ%E3%80%91%20Zynq%20UltraScale%2B%20RFSoC%20ZCU111%20Evaluation%20Kit.html</guid><pubDate>Wed, 04 Sep 2024 13:24:30 +0000</pubDate></item><item><title>【CAN】 CAN控制器芯片-SJA1000应用</title><link>https://Axsye.github.io/blog/post/%E3%80%90CAN%E3%80%91%20CAN-kong-zhi-qi-xin-pian--SJA1000-ying-yong.html</link><description># 手册&#13;
[SJA1000.pdf](https://github.com/user-attachments/files/16871073/SJA1000.pdf)&#13;
&#13;
# 芯片网址&#13;
https://www.nxp.com.cn/products/interfaces/can-transceivers/legacy-can/stand-alone-can-controller:SJA1000T&#13;
&#13;
# 中文使用教程&#13;
&gt;主要是一些寄存器特别是BTR0 BTR1 这两个控制波特率的，详见那个常用CAN速率值表格&#13;
&#13;
![image](https://github.com/user-attachments/assets/61c84c3b-9706-463f-8446-0caa2fe17c11)&#13;
![image](https://github.com/user-attachments/assets/06c76789-7d72-4571-9709-b01ac7a94248)&#13;
![image](https://github.com/user-attachments/assets/db6dd05f-e0df-4b39-9b32-5f461cd38fac)&#13;
。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90CAN%E3%80%91%20CAN-kong-zhi-qi-xin-pian--SJA1000-ying-yong.html</guid><pubDate>Wed, 04 Sep 2024 13:17:55 +0000</pubDate></item><item><title>【STM32】 通过bytes发送float类型-转换问题</title><link>https://Axsye.github.io/blog/post/%E3%80%90STM32%E3%80%91%20-tong-guo-bytes-fa-song-float-lei-xing---zhuan-huan-wen-ti.html</link><description># STM32对于float类型处理&#13;
![image](https://github.com/user-attachments/assets/e0cef6c9-7edd-4b3c-a03f-6d2b500c3759)&#13;
stm32采用IEEE 754, 但是是**高位字节在前**&#13;
从上图（https://www.h-schmidt.net/FloatConverter/IEEE754.html）&#13;
可以看出，对于windows，是低位在前。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90STM32%E3%80%91%20-tong-guo-bytes-fa-song-float-lei-xing---zhuan-huan-wen-ti.html</guid><pubDate>Tue, 13 Aug 2024 14:12:46 +0000</pubDate></item><item><title>【MIT 6.175】00-序</title><link>https://Axsye.github.io/blog/post/%E3%80%90MIT%206.175%E3%80%9100--xu.html</link><description># 一、几门相关课程&#13;
&#13;
🔔视频：&#13;
[新手上路指导-重要必看] https://www.bilibili.com/video/BV1u8411i7Qw/?spm_id_from=333.999.0.0&#13;
[学习经验分享] https://www.bilibili.com/video/BV1cs4y1r7T3/?spm_id_from=333.337.search-card.all.click&#13;
每周3-4天的情况下，花2个月学完&#13;
两份教材&#13;
![image](https://github.com/user-attachments/assets/3b62da77-ab0d-44f3-a79a-89a79338d42a)&#13;
http://csg.csail.mit.edu/6.375/6_375_2019_www/resources/Logic_Design.pdf&#13;
http://csg.csail.mit.edu/6.175/resources/archbook_2015-08-25.pdf&#13;
bluespec那个docx很重要&#13;
![image](https://github.com/user-attachments/assets/5639f81e-64b8-4a02-a0cc-6cfe6af9da88)&#13;
&#13;
🔔文章：&#13;
[Q&amp;A] https://mp.weixin.qq.com/s/-MnRFCXHy5v-tt4MujfqtQ&#13;
[学习笔记] https://mp.weixin.qq.com/s/I5bPw_AUWTh2VgzAm4SHhg&#13;
&#13;
笔记补充：&#13;
【kazutoiris/connectal】https://github.com/kazutoiris/connectal-docker&#13;
&#13;
## 6.004 &#13;
&#13;
MIT 6.004- https://b23.tv/o7YjSkA&#13;
基础课程，共25节视频课（Arvind教授），数电、计组、BSV，B站有相关视频，没有实验&#13;
【【MIT公开课】6.004 计算结构 · 2019年春（完结·中英字幕·机翻）】 https://www.bilibili.com/video/BV197411s736/?p=4&amp;share_source=copy_web&amp;vd_source=1735967fff393ffa3d39f23c1c1f2362&#13;
![屏幕截图 2024-07-26 003836](https://github.com/user-attachments/assets/76f03ad7-6f70-4dec-bd70-2b76b9e445a0)&#13;
![屏幕截图 2024-07-26 004910](https://github.com/user-attachments/assets/97f444b9-8c86-4a16-bdc5-39dc79f646e6)&#13;
&#13;
## 6.175 &#13;
&#13;
MIT 6.17- 5共23个lecture，8个lab，1个project&#13;
http://csg.csail.mit.edu/6.175/index.html&#13;
主要课程，有课件和学习资料，有完善的Lab和Project，6.004的视频配合6.175的课件开展&#13;
![屏幕截图 2024-07-26 005305](https://github.com/user-attachments/assets/9b1cab55-4158-4726-abf2-7db22e856b07)&#13;
![屏幕截图 2024-07-26 005600](https://github.com/user-attachments/assets/f47e7642-2e36-41b7-9153-027f7da2267d)&#13;
&#13;
## 6.375 &#13;
&#13;
MIT 6.375- 共13个lecture，5个lab，1个project&#13;
http://csg.csail.mit.edu/6.375/6_375_2019_www/index.html&#13;
实践课程 使用BSV 包含4+1个Lab，穿插到6.175中学习&#13;
（更正，有课件但是和175重复多）&#13;
![image](https://github.com/user-attachments/assets/669abb20-5fc5-482c-bd8a-4fc0a68cac80)&#13;
&#13;
## 1.1.学习顺序&#13;
&#13;
![image](https://github.com/user-attachments/assets/fa459dd3-3c61-4a68-83b5-63d268f68fe0)&#13;
![image](https://github.com/user-attachments/assets/cde7d944-c34e-4812-8f44-ec9a5504f947)&#13;
&#13;
## 1.2.资源使用指南&#13;
&#13;
![image](https://github.com/user-attachments/assets/dd2236ef-0091-49dc-aa8f-5f4ccaad2566)&#13;
![image](https://github.com/user-attachments/assets/9dea0a22-d9fc-436c-91b8-af00589104c2)&#13;
![image](https://github.com/user-attachments/assets/fc86330a-47fa-42af-854c-7bd035dd1e3c)&#13;
![image](https://github.com/user-attachments/assets/825d76df-5936-4975-85a4-bbe832fe9759)&#13;
![image](https://github.com/user-attachments/assets/c1902045-d519-4240-8a2b-cdae84ebc5df)&#13;
![image](https://github.com/user-attachments/assets/5e79f022-96c6-45ed-942e-b6143cf27f92)&#13;
（此处更正不是resource，是handout）&#13;
![image](https://github.com/user-attachments/assets/69ef61a5-3614-431f-82d1-63bf1e45e1dc)&#13;
![image](https://github.com/user-attachments/assets/d3f0a508-6e41-4166-9986-49f871015743)&#13;
&#13;
### 1.2.1.如何获得实验环境&#13;
&#13;
![image](https://github.com/user-attachments/assets/b1ee7b94-28d0-438c-bcaf-694d593a8665)&#13;
![image](https://github.com/user-attachments/assets/0146cb29-e930-409f-b078-2acb4b795abc)&#13;
![image](https://github.com/user-attachments/assets/35a490eb-1d18-4b93-b706-1767d9343284)&#13;
![image](https://github.com/user-attachments/assets/012ce32b-c039-4a06-9ac7-737912af3866)&#13;
（↑这是代码review的标准）&#13;
![image](https://github.com/user-attachments/assets/8dae511e-fca8-4b05-8de3-4b178e4b8ce1)&#13;
![image](https://github.com/user-attachments/assets/5973058b-61c1-4732-ae2c-d8fecdeda563)&#13;
&#13;
### 1.2.2.BSV工具链&#13;
![image](https://github.com/user-attachments/assets/f75c6d4f-993c-4009-8866-0b420e25f99a)&#13;
（docker还完全不了解）&#13;
&#13;
### 1.2.3.RISCV工具链&#13;
![image](https://github.com/user-attachments/assets/80175cd0-9cd6-4f62-8e0d-ae87cf19dd37)&#13;
（这里很可能是容易卡的难点）&#13;
&#13;
### 1.2.4.工具链安装顺序建议&#13;
![image](https://github.com/user-attachments/assets/e3274355-7ded-47f6-b8c3-3d8d1470dcde)&#13;
&#13;
## 1.3.FAQ&#13;
&#13;
![image](https://github.com/user-attachments/assets/c7259655-ebfa-4996-ba4c-730e7d3cf7fb)&#13;
（可能有一些testbench过时了，BSV更新很快）&#13;
![image](https://github.com/user-attachments/assets/934590aa-1530-419d-885c-ae14232369b7)&#13;
![image](https://github.com/user-attachments/assets/7bbc7867-66a4-423b-90a2-b6497167059e)&#13;
（一生一芯内可能有一些关于linux、git等）&#13;
![image](https://github.com/user-attachments/assets/bf5c58c1-4ea6-495c-83b4-115d01c90805)&#13;
&#13;
&#13;
# 二、关于Bluespec&#13;
&#13;
作为更高级的语言，避免过多的尽力花在程序本身，提高效率，着重于体系结构&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Axsye.github.io/blog/post/%E3%80%90MIT%206.175%E3%80%9100--xu.html</guid><pubDate>Wed, 24 Jul 2024 17:01:12 +0000</pubDate></item></channel></rss>